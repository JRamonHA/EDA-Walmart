[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "EDA Walmart",
    "section": "",
    "text": "El presente análisis exploratorio de datos (EDA) tiene como objetivo comprender la estructura, la calidad y las principales características de los datos históricos de ventas de Walmart. Se busca describir cómo están organizados los datos, su naturaleza jerárquica, e identificar patrones, valores atípicos y posibles inconsistencias que puedan afectar su análisis.\nEl conjunto de datos está compuesto por 42,840 series temporales jerárquicas, correspondientes a registros de ventas a lo largo del tiempo organizados en distintos niveles. Los datos provienen de tres estados de Estados Unidos: California (CA), Texas (TX) y Wisconsin (WI). La naturaleza jerárquica de los datos permite su agregación a diferentes niveles, como producto, departamento, categoría o estado. El período cubierto por las ventas abarca desde enero de 2011 hasta abril de 2016, e incluye también información sobre precios, promociones y días festivos. Cabe señalar que un alto porcentaje de las series presenta periodos con valores de ventas iguales a cero.\nEn total, el conjunto de datos incluye 3,049 productos individuales, distribuidos en 3 categorías, 7 departamentos y   ubicadas en los tres estados mencionados.\nLos datos se presentan en tres archivos separados:\n\nsales_train.csv: Son los datos principales. Contienen una columna para cada uno de los 1913 días desde el 29/01/2011 hasta el 25/04/2016. También incluye los ID de artículo, departamento, categoría, tienda y estado.\ncalendar.csv: Contiene las fechas en las que se venden los productos junto con características relacionadas como día de la semana, mes, año y 3 indicadores binarios que indican si las tiendas en cada estado permitían compras con cupones de alimentos SNAP en esta fecha (1) o no (0).\nsell_prices.csv: Contiene información sobre los productos vendidos (ID de tienda, artículo, fecha y precio de venta)."
  },
  {
    "objectID": "index.html#todas-las-ventas-agregadas",
    "href": "index.html#todas-las-ventas-agregadas",
    "title": "EDA Walmart",
    "section": "4.1 Todas las ventas agregadas",
    "text": "4.1 Todas las ventas agregadas\nEn primer lugar, se presenta la serie temporal agregada de todos los artículos, tiendas, categorías, departamentos y ventas.\n\n\nCódigo\n# ventas totales agregadas\nagg = train.sum().to_frame('sales').T\nagg['id'] = 'total'\nts_agg = extract_ts(agg)\n\nfig = px.line(\n    ts_agg,\n    x='dates',\n    y='sales',\n    title='Ventas agregadas',\n    labels={'dates': 'Fecha', 'sales': 'Ventas'}\n)\nfig.update_layout(template='plotly_white')\nfig.show()\n\n\n        \n        \n        \n\n\n                            \n                                            \n\n\nSe observa lo siguiente:\n\nEn general, las ventas van en aumento, lo que parece positivo para Walmart. Se nota un patrón anual claro, con una caída en Navidad, el único día en que las tiendas permanecen cerradas.\nLas ventas más recientes de 2016 muestran un crecimiento algo más rápido que en los años anteriores."
  },
  {
    "objectID": "index.html#ventas-por-estado",
    "href": "index.html#ventas-por-estado",
    "title": "EDA Walmart",
    "section": "4.2 Ventas por estado",
    "text": "4.2 Ventas por estado\nAhora, se analizarán las ventas por estado a nivel de agregación mensual.\n\n\nCódigo\n# ventas mensuales por estado\nstt = agg_wide(train, ['state_id'])\nts_stt = set_monthly(stt)\n\nfig = px.line(\n    ts_stt,\n    x='dates',\n    y='sales',\n    color='id',\n    title='Ventas mensuales por estado',\n    labels={'dates': 'Fecha', 'sales': 'Ventas', 'id': 'Estado'}\n)\nfig.update_layout(template='plotly_white')\nfig.show()\n\n\n                            \n                                            \n\n\nSe observa lo siguiente:\n\nCalifornia (CA) registra la mayor cantidad de artículos vendidos en general, mientras que Wisconsin (WI) fue acercándose gradualmente a Texas (TX) hasta superarlo en los últimos meses de los datos de entrenamiento.\nCA presentó caídas marcadas en 2013 y 2015, las cuales también se perciben en los demás estados, aunque con menor intensidad. Estos descensos y picos no ocurren de manera constante (por ejemplo, no se aprecian en 2012), pero podrían reflejar principalmente el patrón anual previamente identificado."
  },
  {
    "objectID": "index.html#ventas-por-categoría-y-tienda",
    "href": "index.html#ventas-por-categoría-y-tienda",
    "title": "EDA Walmart",
    "section": "4.3 Ventas por categoría y tienda",
    "text": "4.3 Ventas por categoría y tienda\nEl conjunto de datos incluye 10 tiendas: 4 en California, 3 en Texas y 3 en Wisconsin, así como 3 categorías: FOODS (alimentos), HOBBIES (pasatiempos) y HOUSEHOLD (hogar). Se utilizarán niveles de agregación mensuales para mantener las gráficas claras.\n\nCategoría: Serie de tiempoCategoría: ConteoTienda: Serie de tiempo por estado\n\n\n\n\nCódigo\n# ventas mensuales por categoría\ncat = agg_wide(train, ['cat_id'])\ncat_monthly = set_monthly(cat)\n\nfig = px.line(\n    cat_monthly,\n    x='dates',\n    y='sales',\n    color='id',\n    title='Ventas por categoría',\n    labels={'dates': 'Fecha', 'sales': 'Ventas', 'id': 'Categoría'}\n)\nfig.update_layout(template='plotly_white')\nfig.show()\n\n\n                            \n                                            \n\n\n\n\n\n\nCódigo\n# conteo de ventas por categoría\ncounts = train['cat_id'].value_counts().reset_index()\ncounts.columns = ['id','n']\n\nfig = px.bar(\n    counts,\n    x='id',\n    y='n',\n    color='id',\n    title='Ventas por categoría',\n    labels={'id': 'Categoría', 'n': 'Conteo'}\n)\nfig.update_layout(template='plotly_white')\nfig.update_xaxes(tickfont=dict(size=7))\nfig.show()\n\n\n                            \n                                            \n\n\n\n\n\n\nCódigo\nsto = agg_wide(train, ['store_id'])\nstore_monthly = set_monthly(sto)\n# extraer estado de la id de tienda\nstore_monthly['state_id'] = store_monthly['id'].str.slice(0, 2)\n\nfig = px.line(\n    store_monthly,\n    x='dates',\n    y='sales',\n    color='id',\n    facet_col='state_id',\n    facet_col_wrap=3,\n    title='Ventas por tienda',\n    labels={'dates': 'Fecha', 'sales': 'Ventas', 'id': 'Tienda', 'state_id': 'Estado'}\n)\nfig.update_layout(\n    template='plotly_white',\n    legend_title_text='Tienda',\n    legend_orientation='h',\n    legend_y=-0.2\n)\nfig.update_xaxes(title=None)\nfig.show()\n\n\n                            \n                                            \n\n\n\n\n\nSe observa lo siguiente:\n\nLa categoría FOODS es la más frecuente, seguida de HOUSEHOLD, que se encuentra claramente por encima de HOBBIES. El número de registros de HOUSEHOLD se aproxima más al de FOODS que las cifras de ventas correspondientes, lo que sugiere que se venden más unidades de FOODS que de HOUSEHOLD.\nEn cuanto a las tiendas, las ubicadas en Texas muestran ventas bastante similares entre sí; TX_3 pasa de niveles comparables a TX_1 hasta alcanzar los de TX_2 a lo largo del período analizado. Las tiendas de Wisconsin WI_1 y WI_2 presentan un notable aumento en las ventas en 2012, mientras que WI_3 muestra una caída sostenida durante varios años.\nLas tiendas de California exhiben un volumen de ventas relativamente uniforme. Destaca CA_2, que desciende al nivel de CA_4 en 2015 y posteriormente se recupera, alcanzando las ventas de CA_1 hacia finales del año."
  },
  {
    "objectID": "index.html#ventas-por-departamento",
    "href": "index.html#ventas-por-departamento",
    "title": "EDA Walmart",
    "section": "4.4 Ventas por departamento",
    "text": "4.4 Ventas por departamento\nLos datos incluyen 7 departamentos: 3 en la categoría FOODS y 2 en cada una de las categorías HOBBIES y HOUSEHOLD. Junto con los 3 estados, estos niveles suman un total de 21 combinaciones.\n\n\nCódigo\n# ventas mensuales por departamento y estado\ndept = (\n    train\n    .groupby(['dept_id', 'state_id'])[cols_d(train)]\n    .sum()\n    .reset_index()\n)\n\ndf_dept = dept[['dept_id', 'state_id'] + cols_d(dept)]\nts_dept = df_dept.melt(id_vars=['dept_id', 'state_id'], var_name='day', value_name='sales')\n\nts_dept['day'] = ts_dept['day'].str.removeprefix('d_').astype(int)\nts_dept['dates'] = ts_dept['day'].apply(lambda d: MIN_DATE + timedelta(days=d - 1))\n# agregar mes/año\nts_dept['month'] = ts_dept['dates'].dt.month\nts_dept['year'] = ts_dept['dates'].dt.year\n\ndept_monthly = (\n    ts_dept\n    .groupby(['year', 'month', 'dept_id', 'state_id'], as_index=False)\n    .agg(\n        sales=('sales', 'sum'),\n        dates=('dates', 'min')\n    )\n)\n# filtrar primer día y quitar mes incompleto\ndept_monthly = dept_monthly[dept_monthly['dates'].dt.day == 1]\nlast = dept_monthly['dates'].max()\ndept_monthly = dept_monthly[dept_monthly['dates'] != last]\n\n# gráfica por depto y estado\nfig = px.line(\n    dept_monthly,\n    x='dates',\n    y='sales',\n    color='dept_id',\n    facet_row='state_id',\n    facet_col='dept_id',\n    title='Ventas por departamento y estado',\n    labels={\n        'dates': 'Fecha',\n        'sales': 'Ventas',\n        'dept_id': 'Depto',\n        'state_id': 'Estado'\n    }\n)\nfig.update_layout(template='plotly_white', showlegend=False)\nfig.update_annotations(font_size=8)\nfig.update_xaxes(title=None)\nfig.update_yaxes(title=None)\nfig.show()\n\n\n                            \n                                            \n\n\nSe observa lo siguiente:\n\nFOODS_3 concentra claramente la mayor parte de las ventas dentro de la categoría FOODS en todos los estados. FOODS_2 muestra un ligero incremento hacia el final del período, especialmente en Wisconsin.\nDe manera similar, HOUSEHOLD_1 supera con claridad a HOUSEHOLD_2 en volumen de ventas. Por su parte, HOBBIES_1 mantiene un nivel promedio de ventas superior al de HOBBIES_2, aunque en ambos casos no se aprecia un cambio significativo a lo largo del tiempo."
  },
  {
    "objectID": "index.html#calendario-1",
    "href": "index.html#calendario-1",
    "title": "EDA Walmart",
    "section": "5.1 Calendario",
    "text": "5.1 Calendario\nEn la Sección 3 se aprecia que el dataframe calendar incluye características básicas como día de la semana (columna weekday en formato de texto y wday en formato numérico), mes, año y, por supuesto, fecha. Junto a la fecha aparece también la columna d, que vincula cada fecha con los nombres de columna en los datos de entrenamiento.\nEl resto de los atributos están relacionados con eventos y con cupones de asistencia alimentaria:\n\nAl revisar la Sección 3, se observa que las columnas event_name_2 y event_type_2 solo tienen datos en cinco filas (el resto son valores ausentes). Por eso, este análisis se centrará únicamente en las columnas event_name_1 y event_type_1.\nEl acrónimo SNAP corresponde a “Supplemental Nutrition Assistance Program” (programa federal de asistencia nutricional). Según su sitio web:\n\n“El programa SNAP es el mayor programa federal de asistencia nutricional. Proporciona beneficios a personas y familias de bajos ingresos mediante una tarjeta de transferencia electrónica de beneficios, que puede usarse como una tarjeta de débito para adquirir alimentos autorizados en establecimientos de venta al por menor.”\n\n\n\nDías con eventos vs Sin eventosTipos de eventosDías con SNAP por estado\n\n\n\n\nCódigo\n# días con eventos vs sin eventos\nevents = (\n    calendar\n    .assign(event=lambda df: ~df['event_type_1'].isna())\n    .groupby('event')\n    .size()\n    .reset_index(name='count')\n)\nevents['total'] = events['count'].sum()\nevents['perc'] = events['count'] / events['total']\n\nfig = px.bar(\n    events,\n    x='event',\n    y='perc',\n    title='Días con eventos',\n    labels={'event': 'Evento', 'perc': 'Porcentaje'},\n    color='event'\n)\nfig.update_layout(template='plotly_white', showlegend=False)\nfig.update_xaxes(title=None)\nfig.update_yaxes(title=None, tickformat='.0%')\nfig.show()\n\n\n                            \n                                            \n\n\n\n\n\n\nCódigo\n# tipos de eventos\ntps = (\n    calendar\n    .dropna(subset=['event_type_1'])\n    .groupby('event_type_1')\n    .size()\n    .reset_index(name='count')\n)\ntps['total'] = tps['count'].sum()\ntps['perc'] = tps['count'] / tps['total']\n\nlabel_map = {\n    'Religious': 'Religioso',\n    'National': 'Nacional',\n    'Cultural': 'Cultural',\n    'Sporting': 'Deportivo'\n}\ntps['event_type_1'] = tps['event_type_1'].map(label_map)\n\nfig = px.pie(\n    tps,\n    names='event_type_1',  \n    values='perc',         \n    title='Tipos de eventos',\n    hole=0,\n    labels={'event_type_1':'Evento','perc':'Porcentaje'}\n)\nfig.update_traces(\n    texttemplate='%{label}: %{percent:.0%}',\n    hovertemplate='%{label}: %{percent:.0%}'\n)\nfig.show()\n\n\n                            \n                                            \n\n\n\n\n\n\nCódigo\n# días con SNAP por estado\nsnap_cols = [col for col in calendar.columns if col.startswith('snap_')]\n\nsnp = (\n    calendar\n    .melt(id_vars=['date'], value_vars=snap_cols, var_name='state', value_name='snap')\n    .assign(state=lambda df: df['state'].str[-2:])  \n    .assign(snap=lambda df: df['snap'].astype(bool))  \n    .groupby(['state', 'snap'])\n    .size()\n    .reset_index(name='count')\n)\nsnp['total'] = snp.groupby('state')['count'].transform('sum')\nsnp['perc'] = snp['count'] / snp['total']\n\nfig = px.bar(\n    snp,\n    x='snap',\n    y='perc',\n    facet_col='state',\n    facet_col_wrap=3,\n    color='snap',\n    title='Días con compras SNAP por estado',\n    labels={'snap': 'SNAP', 'perc': 'Porcentaje', 'state': 'Estado'}\n)\nfig.update_yaxes(title=None, tickformat='.0%')\nfig.update_xaxes(title=None)\nfig.update_traces(\n    hovertemplate='SNAP: %{x}&lt;br&gt;' + 'Porcentaje: %{y:.0%}&lt;extra&gt;&lt;/extra&gt;'\n)\nfig.update_layout(template='plotly_white', showlegend=False)\nfig.show()\n\n\n                            \n                                            \n\n\n\n\n\nSe encuentra lo siguiente:\n\nEn el calendario, alrededor del 8% de los días registra un evento especial. De esos días, aproximadamente un tercio corresponde a celebraciones religiosas y otro tercio a festividades nacionales; el tercio restante se divide en dos tercios de eventos culturales y un tercio de eventos deportivos.\nEl porcentaje de días en que las tiendas Walmart aceptan cupones SNAP es idéntico para California, Texas y Wisconsin: 650 días, lo que equivale al 33%."
  },
  {
    "objectID": "index.html#precio-de-los-productos",
    "href": "index.html#precio-de-los-productos",
    "title": "EDA Walmart",
    "section": "5.2 Precio de los productos",
    "text": "5.2 Precio de los productos\nSe dispone de información detallada sobre los precios de los productos, incluyendo sus ID de categoría, departamento y tienda (que a su vez incluye el ID de estado). Los precios se presentan como promedios semanales, y la variable wm_yr_wk permite vincular cada semana con su fecha correspondiente a través de la columna de calendario del mismo nombre.\nPara analizar los precios promedio de los productos por categoría y departamento entre los años 2011 y 2016, se empleó el siguiente proceso:\n\n\nCódigo\nitem_info = train[['item_id', 'cat_id', 'dept_id']].drop_duplicates()\ndf = prices.merge(calendar[['wm_yr_wk', 'year']], on='wm_yr_wk', how='left')\ndf = df.merge(item_info, on='item_id', how='left')\n\ndf_group = (\n    df.groupby(['year', 'cat_id', 'dept_id'])['sell_price']\n    .mean()\n    .reset_index()\n)\n\n\n\nCategoría: FOODSCategoría: HOBBIESCategoría: HOUSEHOLD\n\n\n\n\nCódigo\nfoods = df_group[df_group['cat_id'] == 'FOODS']\n\nfig = px.line(\n    foods,\n    x='year',\n    y='sell_price',\n    color='dept_id',\n    markers=True,\n    title='Evolución del precio promedio',\n    labels={'sell_price': 'Precio promedio', 'year': 'Año', 'dept_id': 'Departamento'},\n    template='plotly_white'\n)\n\nfig.show()\n\n\n                            \n                                            \n\n\n\n\n\n\nCódigo\nhobbies = df_group[df_group['cat_id'] == 'HOBBIES']\n\nfig = px.line(\n    hobbies,\n    x='year',\n    y='sell_price',\n    color='dept_id',\n    markers=True,\n    title='Evolución del precio promedio',\n    labels={'sell_price': 'Precio promedio', 'year': 'Año', 'dept_id': 'Departamento'},\n    template='plotly_white'\n)\n\nfig.show()\n\n\n                            \n                                            \n\n\n\n\n\n\nCódigo\nhousehold = df_group[df_group['cat_id'] == 'HOUSEHOLD']\n\nfig = px.line(\n    household,\n    x='year',\n    y='sell_price',\n    color='dept_id',\n    markers=True,\n    title='Evolución del precio promedio',\n    labels={'sell_price': 'Precio promedio', 'year': 'Año', 'dept_id': 'Departamento'},\n    template='plotly_white'\n)\n\nfig.show()\n\n\n                            \n                                            \n\n\n\n\n\nSe observa lo siguiente:\nEn términos generales, los precios promedio se mantienen relativamente estables a lo largo de los años, con incrementos graduales que podrían atribuirse a la inflación.\n\nEn la categoría FOODS, se identifican las siguientes tendencias:\n\nEn FOODS_1, el precio promedio fluctúa entre 3.3 y 3.4, mostrando estabilidad con leves variaciones a lo largo del período.\nEn FOODS_2, se observa un aumento constante desde 3.8 en 2011 hasta 4.2 en 2016, reflejando una tendencia de alza clara.\nEn FOODS_3, el precio permanece estable en 2.8 hasta 2013, con un ligero incremento a 2.9 hacia 2016.\n\nEn la categoría HOBBIES, se observan las siguientes dinámicas:\n\nEn HOBBIES_1, el precio crece de manera sostenida desde 5.2 en 2011 hasta 6.6 en 2016, mostrando un incremento notable.\nEn HOBBIES_2, el precio desciende de 2.8 hasta 2.5 a lo largo de todo el período, con una tendencia descendiente.\n\nEn la categoría HOUSEHOLD, se destacan los siguientes patrones:\n\nEn HOUSEHOLD_1, el precio se mantiene en torno a 4.9 hasta 2013, con un aumento gradual a 5.1 en 2016.\nEn HOUSEHOLD_2, el precio disminuye de 6.1 en 2011 a 5.7 en 2016, indicando una tendencia descendente leve pero constante."
  }
]